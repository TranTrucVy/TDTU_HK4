# -*- coding: utf-8 -*-
"""52100674.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15-LLGPeWD1xB2traf6lX4hQzMJTmNsaZ
"""

# Exercise 1 
def mPlus(A, B):
    rows, cols = len(A), len(A[0])
    C = [[0 for j in range(cols)] for i in range(rows)]
    for i in range(rows):
        for j in range(cols):
            C[i][j] = A[i][j] + B[i][j]
    return C
def mMinus(A, B):
    rows, cols = len(A), len(A[0])
    C = [[0 for j in range(cols)] for i in range(rows)]
    for i in range(rows):
        for j in range(cols):
            C[i][j] = A[i][j] - B[i][j]
    return C
def mMultiply(A, B):
    rowsA, colsA = len(A), len(A[0])
    rowsB, colsB = len(B), len(B[0])
    if colsA != rowsB:
        print("Fail. Please enter again.")
    C = [[0 for j in range(colsB)] for i in range(rowsA)]
    for i in range(rowsA):
        for j in range(colsB):
            for k in range(colsA):
                C[i][j] += A[i][k] * B[k][j]
    return C

def mTranspose(A):
    rows = len(A)
    cols = len(A[0])
    result = [[0 for j in range(rows)] for i in range(cols)]
    for i in range(rows):
        for j in range(cols):
            result[j][i] = A[i][j]  
    return result
A = [[1,2,3],
    [4 ,5,6],
    [7 ,8,9]]
  
B = [[9,8,7],
    [6,5,4],
    [3,2,1]]
print(mPlus(A, B)) 
print(mMinus(A, B)) 
print(mMultiply(A, B))
print(mTranspose(A))

# Exercise 2
import matplotlib.pyplot as plt
import networkx as nx
import numpy as np
A1=np.array([
[0,0,3,0,1],
[0,0,5,3,0],
[0,0,0,1,0],
[0,0,0,0,2],
[0,0,0,0,0]
])
G1 = nx.DiGraph(np.array(A1))
pos=nx.spring_layout(G1)
nx.draw_networkx(G1,pos=pos,with_labels=True,labels={a:b for
a,b in enumerate('abcde')})
edge_labels = nx.draw_networkx_edge_labels(G1,font_size=5,
pos=pos,label_pos=0.5)
plt.axis('equal')
plt.show()

A1=np.array([
[0,0,3,0,1,1],
[0,0,5,3,0,0],
[0,0,0,1,5,0],
[0,0,0,0,2,3],
[0,0,0,0,0,6],
[0,0,0,0,0,0]
])
G1 = nx.DiGraph(np.array(A1))
pos=nx.spring_layout(G1)
nx.draw_networkx(G1,pos=pos,with_labels=True,labels={a:b for
a,b in enumerate('abcdef')})
edge_labels = nx.draw_networkx_edge_labels(G1,font_size=5,
pos=pos,label_pos=0.5)
plt.axis('equal')
plt.show()

# Exercise 3
import networkx as nx
import matplotlib.pyplot as plt

edges_a = [('A', 'C', 5), ('A', 'D', 3), ('B', 'C', 3), ('B', 'D', 2), ('C', 'D', 1), ('C', 'E', 3)]

G_a = nx.Graph()
G_a.add_weighted_edges_from(edges_a)

pos_a = nx.spring_layout(G_a)
nx.draw(G_a, pos_a, with_labels=True, font_weight='bold')
labels_a = nx.get_edge_attributes(G_a, 'weight')
nx.draw_networkx_edge_labels(G_a, pos_a, edge_labels=labels_a)
plt.show()

edges_b = [('A', 'C', 2), ('A', 'D', 3), ('A', 'E', 3), ('B', 'C', 3), ('B', 'D', 2), ('C', 'D', 2), ('C', 'E', 8), ('C', 'F', 6), ('D', 'F', 5), ('E', 'F', 3)]

G_b = nx.Graph()
G_b.add_weighted_edges_from(edges_b)

pos_b = nx.spring_layout(G_b)
nx.draw(G_b, pos_b, with_labels=True, font_weight='bold')
labels_b = nx.get_edge_attributes(G_b, 'weight')
nx.draw_networkx_edge_labels(G_b, pos_b, edge_labels=labels_b)
plt.show()

# Exercise 4
import numpy as np
def toLoE(A):
    n = A.shape[0] 
    result = []
    for i in range(n):
        for j in range(i+1, n):
            if A[i,j] > 0:
                result.append((chr(65+i), chr(65+j), A[i,j]))  
    return result
A = np.array([[0, 0, 2, 3, 0],
              [0, 0, 3, 2, 0],
              [0, 0, 0, 6, 3],
              [0, 0, 0, 0, 1],
              [0, 0, 0, 0, 0]])

print(toLoE(A))